akka{
    loglevel = DEBUG
}

mySpecialConfig{
    akka {
        loglevel = INFO
    }
}

# timed assertion test config
specialTimedAssertionsConfig{
    akka.test.single-expect-default = 5s
}

# intercepting log messages test
interceptingLogMessages{
    akka{
        loggers = ["akka.testkit.TestEventListener"]
        test{
            filter-leeway = 5s
        }
    }
}

# routes demo
routersDemo{
    akka{
        actor.deployment{
            # actor who's being instantiate
            /poolMaster2{
                router = round-robin-pool
                nr-of-instances = 5
            }

            /groupMaster2{
                router = round-robin-group
                routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
            }
        }
    }
}

# dispatchers Demo

my-dispatcher{
    # there are a lot of dispacthers, Dispatcher is the more frequently used and is based on an executor service
    # it binds an actor to a thread-pool
    type = Dispatcher
    # there also PinnedDispatcher - pins each actor in thread pool of exactly 1 thread
    # CallingThreadDispatcher - all invocations or communications with an actor happen in a calling thread
    # executor - handles how messages are being handled in which thread, other example, join-pool
    executor = "thread-pool-executor"
    thread-pool-executor{
        fixed-pool-size = 1
    }
    throughput = 30
}
dispatchersDemo{
    akka.actor.deployment{
        # actor path
        /rtjvm{
            dispacther = my-dispatcher
        }
    }
}

# mailboxes demo

mailboxesDemo{
    support-ticket-dispatcher{
        mailbox-type = "part5infra.Mailboxes$SupportTicketPriorityMailbox"
    }

    control-mailbox{
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    akka.actor.deployment{
        /altControlAwareActor{
            mailbox = control-mailbox
        }
    }
}
